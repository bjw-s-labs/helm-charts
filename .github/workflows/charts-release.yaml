---
name: "Charts: Release"

concurrency: helm-release

on:
  workflow_dispatch:
    inputs:
      charts:
        description: >
          Charts to release. Comma-separated string.
          Defaults to releasing everything.
        default: ""
        required: false

  push:
    branches:
      - main
      - rework-publishing-ci
    paths:
      - "charts/**"

env:
  HELM_VERSION: 3.17.0

jobs:
  changed-charts:
    name: Prepare data required for release
    runs-on: ubuntu-22.04
    outputs:
      repoConfiguration: ${{ steps.repo-config.outputs.config }}
      libraryChartsToRelease: ${{ steps.changed-library-charts.outputs.all_changed_files }}
      applicationChartsToRelease: ${{ steps.changed-charts.outputs.all_changed_files }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Grab repository configuration
        id: repo-config
        shell: bash
        run: |
          echo "config=$(yq '.' '.ci/repo-config.yaml' -o json -I=0)" >> "$GITHUB_OUTPUT"

      - name: Get changed library charts
        id: changed-library-charts
        uses: tj-actions/changed-files@v45
        with:
          matrix: true
          base_sha: main  # TODO: Remove this
          path: charts
          dir_names: true
          dir_names_max_depth: 2
          files: |
            library/**

      - name: Get changed charts
        id: changed-charts
        uses: tj-actions/changed-files@v45
        with:
          matrix: true
          base_sha: main  # TODO: Remove this
          path: charts
          dir_names: true
          dir_names_max_depth: 2
          files_ignore: |
            library/**

  package-library-charts:
    name: Package library charts
    runs-on: ubuntu-22.04
    needs:
      - changed-charts
    strategy:
      matrix:
        charts: ${{ fromJSON(needs.changed-charts.outputs.libraryChartsToRelease) }}
      max-parallel: 2
      fail-fast: false
    steps:
      - name: Echo chart folder
        if: ${{ !contains(fromJSON(needs.changed-charts.outputs.repoConfiguration).excluded-charts-release, matrix.charts) }}
        run: |
          echo ${{ matrix.charts }}

      - name: Checkout source branch
        if: ${{ !contains(fromJSON(needs.changed-charts.outputs.repoConfiguration).excluded-charts-release, matrix.charts) }}
        uses: actions/checkout@v4
        with:
          path: src
          fetch-depth: 0

      - name: Install Kubernetes tools
        if: ${{ !contains(fromJSON(needs.changed-charts.outputs.repoConfiguration).excluded-charts-release, matrix.charts) }}
        uses: yokawasa/action-setup-kube-tools@v0.11.1
        with:
          setup-tools: |
            helmv3
          helm: "${{ env.HELM_VERSION }}"

      - name: Grab chart details
        id: chart-details
        shell: bash
        env:
          SRC_DIR: "src/charts"
        run: |
          mapfile -t CHART_PATH_PARTS < <(echo "${{ matrix.charts }}" | tr '/' '\n')
          CHART_FOLDER=${CHART_PATH_PARTS[0]}
          echo "folder=${CHART_FOLDER}" >> "$GITHUB_OUTPUT"
          echo "name=$(yq '.name' ${SRC_DIR}/${{ matrix.charts }}/Chart.yaml)" >> "$GITHUB_OUTPUT"
          echo "version=$(yq '.version' ${SRC_DIR}/${{ matrix.charts }}/Chart.yaml)" >> "$GITHUB_OUTPUT"

      - name: Dereference JSON schema before packaging
        if: ${{ !contains(fromJSON(needs.changed-charts.outputs.repoConfiguration).excluded-charts-release, matrix.charts) }}
        uses: bjw-s/helm-charts-actions/dereference-json-schema@main
        with:
          schemaFile: src/charts/${{ matrix.charts }}/values.schema.json
          outputFile: src/charts/${{ matrix.charts }}/values.schema.json

      - name: Package Helm Chart
        if: ${{ !contains(fromJSON(needs.changed-charts.outputs.repoConfiguration).excluded-charts-release, matrix.charts) }}
        shell: bash
        env:
          SRC_DIR: src/charts
          CHART_FOLDER: "${{ steps.chart-details.outputs.folder }}"
        run: |
          helm package "${SRC_DIR}/${{ matrix.charts }}" --dependency-update --destination "out/${CHART_FOLDER}"

      - name: Upload artifact
        if: ${{ !contains(fromJSON(needs.changed-charts.outputs.repoConfiguration).excluded-charts-release, matrix.charts) }}
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.chart-details.outputs.folder }}__${{ steps.chart-details.outputs.name }}__${{ steps.chart-details.outputs.version }}"
          path: out/${{ steps.chart-details.outputs.folder }}/${{ steps.chart-details.outputs.name }}-${{ steps.chart-details.outputs.version }}.tgz
          retention-days: 7

  release-library-charts-to-github-pages:
    name: Release library charts to GitHub Pages
    runs-on: ubuntu-22.04
    needs:
      - package-library-charts
    steps:
      - name: Generate Token
        if: ${{ !contains(fromJSON(needs.changed-charts.outputs.repoConfiguration).excluded-charts-release, matrix.charts) }}
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: "${{ secrets.BJWS_APP_ID }}"
          private-key: "${{ secrets.BJWS_APP_PRIVATE_KEY }}"

      - name: Download chart artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: library__*

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          path: gh-pages
          ref: gh-pages
          fetch-depth: 0

      - name: Display structure of downloaded files
        run: |
          CHARTS=( ls artifacts/ )

          for CHART in "${CHARTS[@]}" ; do
            mapfile -t CHART_PATH_PARTS < <(echo "$CHART" | tr '__' '\n')
            CHART_TYPE=${CHART_PATH_PARTS[0]}
            CHART_NAME=${CHART_PATH_PARTS[1]}
            CHART_VERSION=${CHART_PATH_PARTS[2]}

            echo $CHART_TYPE
            echo $CHART_NAME
            echo $CHART_VERSION
          done

  # release-charts:
  #   name: Release charts
  #   runs-on: ubuntu-22.04
  #   needs:
  #     - changed-charts
  #     - release-library-charts
  #   strategy:
  #     matrix:
  #       charts: ${{ fromJSON(needs.changed-charts.outputs.applicationChartsToRelease) }}
  #     max-parallel: 2
  #     fail-fast: false
  #   steps:
  #     - name: Echo chart folder
  #       if: ${{ !contains(fromJSON(needs.changed-charts.outputs.repoConfiguration).excluded-charts-release, matrix.charts) }}
  #       run: |
  #         echo ${{ matrix.charts }}

  #   uses: ./.github/workflows/charts-release-ghpages.yaml
  #   with:
  #     charts: "${{ needs.prepare.outputs.libraryChartsToRelease }}"
  #   secrets: inherit

  # tag-library-charts:
  #   name: Create git tags for library charts
  #   uses: ./.github/workflows/tag-charts.yaml
  #   needs:
  #     - prepare
  #     - release-library-charts
  #   with:
  #     charts: "${{ needs.prepare.outputs.libraryChartsToRelease }}"
  #   secrets: inherit

  # release-application-charts:
  #   name: Release Application charts to GitHub pages
  #   uses: ./.github/workflows/charts-release-ghpages.yaml
  #   needs:
  #     - prepare
  #     - release-library-charts
  #   with:
  #     charts: "${{ needs.prepare.outputs.applicationChartsToRelease }}"
  #   secrets: inherit

  # tag-application-charts:
  #   name: Create git tags for application charts
  #   uses: ./.github/workflows/tag-charts.yaml
  #   needs:
  #     - prepare
  #     - release-application-charts
  #   with:
  #     charts: "${{ needs.prepare.outputs.applicationChartsToRelease }}"
  #   secrets: inherit

  # release-github-oci:
  #   name: Release Application charts to GitHub Container Registry
  #   uses: ./.github/workflows/charts-release-oci.yaml
  #   needs:
  #     - prepare
  #     - release-library-charts
  #   with:
  #     charts: "${{ needs.prepare.outputs.applicationChartsToRelease }}"
  #   secrets: inherit
